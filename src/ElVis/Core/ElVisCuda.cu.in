///////////////////////////////////////////////////////////////////////////////
//
// The MIT License
//
// Copyright (c) 2006 Scientific Computing and Imaging Institute,
// University of Utah (USA)
//
// License for the specific language governing rights and limitations under
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#define ELVIS_CUDA_MODULE

#include <ElVis/Core/Cuda.h>
#include <ElVis/Core/Float.cu>
#include <ElVis/Core/ElementId.h>
#include <ElVis/Core/ReferencePointParameter.h>
#include <ElVis/Core/typedefs.cu>
#include <ElVis/Core/Interval.hpp>
#include <ElVis/Core/IntervalPoint.cu>

__device__ uchar4* color_buffer;
__device__ ElVisFloat3* raw_color_buffer;
__device__ float* depth_buffer;
__device__ ElVisFloat3* normal_buffer;
__device__ ElVisFloat3* intersection_buffer;
__device__ ElVisFloat* SampleBuffer;
__device__ int* ElementIdBuffer;
__device__ int* ElementTypeBuffer;

#include <ElVis/Core/Printf.cu>


///////////////////////////////////////////////////////////////////////////////
// Begin Interface
//
// The following methods represent the interface to the OptiX portion of ElVis.
// Each method must be implemented in a file called ExtensionOptiXInterface.cu 
// in the extension's directory.
///////////////////////////////////////////////////////////////////////////////

/// \brief Converts a point from world space to the given element's reference space.
/// \param elementId The element's id.
/// \param elementType The element's type.
/// \param wp The world point to be converted.
/// \param referenceType Describes the meaning of result.  If eReferencePointIsInvalid then
///        result will only be used for output. If eReferencePointIsInitialGuess, then result is
///        a guess for the actual location of the reference point.
/// \param result On input, it can be an initial guess.  On output, the actual reference point corresponding to wp.
/// \returns
ELVIS_DEVICE ElVisError ConvertWorldToReferenceSpaceCuda(int elementId, int elementType, const WorldPoint& wp,
                                                         ElVis::ReferencePointParameterType referenceType, ReferencePoint& result);

/// \brief Evaluates a scalar field at the given point.
/// \param elementId The element's id.
/// \param elementType The element's type.
/// \param fieldId The field to be evaluated.
/// \param point The point at which the field will be evaluated.
/// \param result The result of the evaluation.
/// \returns
///
/// This method is designed to be used for evaluation at a single reference point (x0, x1, x2) and at
/// an interval of the reference space ([x0_low, x0_high], [x1_low, x1_high], [x2_low, x2_high]).
template<typename PointType, typename ResultType>
ELVIS_DEVICE ElVisError SampleScalarFieldAtReferencePointCuda(int elementId, int elementType, int fieldId,
                                                              const PointType& worldPoint,
                                                              const PointType& referencePoint,
                                                              ResultType& result);


ELVIS_DEVICE ElVisError SampleReferenceGradientCuda(int elementId, int elementType, int fieldId, const ReferencePoint& refPoint, ElVisFloat3& gradient);

ELVIS_DEVICE ElVisError SampleGeometryMappingJacobian(int elementId, int elementType, const ReferencePoint& refPoint, ElVisFloat* J);



#include <@ExtensionPath@/ExtensionCudaInterface.cu>

///////////////////////////////////////////////////////////////////////////////
// End Interface
// 
// The methods and code below are not part of the interface.
///////////////////////////////////////////////////////////////////////////////




ELVIS_DEVICE ElVisFloat EvaluateFieldCuda(unsigned int elementId, unsigned int elementType, int fieldId, const ElVisFloat3& worldPoint, ElVis::ReferencePointParameterType referenceType, ElVisFloat3& referencePoint)
{
    if( referenceType != ElVis::eReferencePointIsValid )
    {
        ConvertWorldToReferenceSpaceCuda(elementId, elementType, worldPoint, referenceType, referencePoint);
    }
    ElVisFloat result = MAKE_FLOAT(0.0);
    SampleScalarFieldAtReferencePointCuda(elementId, elementType, fieldId, worldPoint, referencePoint, result);
    return result;
}

ELVIS_DEVICE ElVisFloat EvaluateFieldCuda(unsigned int elementId, unsigned int elementType, int fieldId, const ElVisFloat3& worldPoint)
{
    ElVisFloat3 dummy;
    return EvaluateFieldCuda(elementId, elementType, fieldId, worldPoint, ElVis::eReferencePointIsInvalid, dummy);
}

/// \brief
ELVIS_DEVICE ElVisError EstimateRangeCuda(unsigned int elementId, unsigned int elementType, int fieldId,
                                          const WorldPoint& p0, const WorldPoint& p1,
                                          ElVis::Interval<ElVisFloat>& result)
{
    ReferencePoint r0, r1;
    ElVisError e0 = ConvertWorldToReferenceSpaceCuda(elementId, elementType, p0, ElVis::eReferencePointIsInvalid, r0);
    ElVisError e1 = ConvertWorldToReferenceSpaceCuda(elementId, elementType, p1, ElVis::eReferencePointIsInvalid, r1);

    IntervalPoint referenceInterval(r0, r1);
    IntervalPoint worldInterval(p0, p1);
    ElVisError e2 = SampleScalarFieldAtReferencePointCuda(elementId, elementType, fieldId,
                                                          worldInterval, referenceInterval, result);

    return eNoError;
}

ELVIS_DEVICE ElVisError EvaluateNormalCuda(unsigned int elementId, unsigned int elementType, int fieldId,
                                            const ElVisFloat3& worldPoint, ElVisFloat3& normal)
{
    ReferencePoint refPoint;
    ElVisError e0 = ConvertWorldToReferenceSpaceCuda(elementId, elementType, worldPoint, ElVis::eReferencePointIsInvalid, refPoint);

    ElVisFloat3 gradient;
    ElVisError e1 = SampleReferenceGradientCuda(elementId, elementType, fieldId, refPoint, gradient);

    ElVisFloat J[9], JInv[9];

    ElVisError e2 = SampleGeometryMappingJacobian(elementId, elementType, refPoint, &J[0]);

    // Invert
    ElVisFloat determinant = (-J[0]*J[4]*J[8]+J[0]*J[5]*J[7]+J[3]*J[1]*J[8]-J[3]*J[2]*J[7]-J[6]*J[1]*J[5]+J[6]*J[2]*J[4]);
    ElVisFloat i = MAKE_FLOAT(1.0)/determinant;
    JInv[0] = (-J[4]*J[8]+J[5]*J[7])*i;
    JInv[1] = -(-J[1]*J[8]+J[2]*J[7])*i;
    JInv[2] = -(J[1]*J[5]-J[2]*J[4])*i;
    JInv[3] = -(-J[3]*J[8]+J[5]*J[6])*i;
    JInv[4] = (-J[0]*J[8]+J[2]*J[6])*i;
    JInv[5] = (J[0]*J[5]-J[2]*J[3])*i;
    JInv[6] = (-J[3]*J[7]+J[4]*J[6])*i;
    JInv[7] = (J[0]*J[7]-J[1]*J[6])*i;
    JInv[8] = -(J[0]*J[4]-J[1]*J[3])*i;

    // Transpose
    J[0] = JInv[0];
    J[1] = JInv[3];
    J[2] = JInv[6];

    J[3] = JInv[1];
    J[4] = JInv[4];
    J[5] = JInv[7];

    J[6] = JInv[2];
    J[7] = JInv[5];
    J[8] = JInv[8];

    normal.x = gradient.x*J[0] + gradient.y*J[1] + gradient.z*J[2];
    normal.y = gradient.x*J[3] + gradient.y*J[4] + gradient.z*J[5];
    normal.z = gradient.x*J[6] + gradient.y*J[7] + gradient.z*J[8];

    return eNoError;
}

#include <ElVis/Core/IsosurfaceModuleCuda.cu>
#include <ElVis/Core/VolumeRendering.cu>
#include <ElVis/Core/VolumeRenderingSingleRayPerSegment.cu>
#include <ElVis/Core/VolumeRenderingFull.cu>

