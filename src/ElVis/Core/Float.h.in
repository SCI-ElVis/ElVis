///////////////////////////////////////////////////////////////////////////////
//
// The MIT License
//
// Copyright (c) 2006 Scientific Computing and Imaging Institute,
// University of Utah (USA)
//
// License for the specific language governing rights and limitations under
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef ELVIS_FLOAT_H
#define ELVIS_FLOAT_H

#include <vector_types.h>
#include <optix.h>
#include <device_functions.h>
#include <optix_math.h>
#include <optixu/optixu_matrix.h>
#include <optixu/optixu_aabb.h>

typedef @ELVIS_FLOAT@ ElVisFloat;
typedef @ELVIS_FLOAT@2 ElVisFloat2;
typedef @ELVIS_FLOAT@3 ElVisFloat3;
typedef @ELVIS_FLOAT@4 ElVisFloat4;

#cmakedefine01 ELVIS_USE_DOUBLE_PRECISION

RT_HOSTDEVICE static double fminf(const double& a, const double& b)
{
    return a < b ? a : b;
}

RT_HOSTDEVICE static double fmaxf(const double& a, const double& b)
{
    return a > b ? a : b;
}

#if ELVIS_USE_DOUBLE_PRECISION == 0
    #define MAKE_FLOAT(p) p##f
#else
    #define MAKE_FLOAT(p) p
#endif
    
#define ELVIS_FLOAT_MAX MAKE_FLOAT(3.2e37)
#define ELVIS_FLOAT_COMPARE MAKE_FLOAT(3.1e37)

__device__ __forceinline__ ElVisFloat2 MakeFloat2(const ElVisFloat& x, const ElVisFloat& y)
{
    ElVisFloat2 result;
    result.x = x;
    result.y = y;
    return result;
}

__device__ __forceinline__ ElVisFloat2 MakeFloat2(const uint2& value)
{
    ElVisFloat2 result;
    result.x = static_cast<ElVisFloat>(value.x);
    result.y = static_cast<ElVisFloat>(value.y);
    return result;
}

#if @CMAKE_SIZEOF_VOID_P@ == 8
__device__ __forceinline__ ElVisFloat2 MakeFloat2(const optix::size_t2& value)
{
    ElVisFloat2 result;
    result.x = static_cast<ElVisFloat>(value.x);
    result.y = static_cast<ElVisFloat>(value.y);
    return result;
}
#endif


#if ELVIS_USE_DOUBLE_PRECISION == 0
	
    __device__ __forceinline__ ElVisFloat3 MakeFloat3(const ElVisFloat4& f)
    {
        return make_float3(f.x, f.y, f.z);
    }
    
    __device__ __forceinline__ ElVisFloat3 MakeFloat3(const float& p0, const float& p1, const float& p2)
    {
        return make_float3(p0, p1, p2);
    }
    
    __device__ __forceinline__ ElVisFloat4 MakeFloat4(const float& p0, const float& p1, const float& p2, const float& p3)
    {
        return make_float4(p0, p1, p2, p3);
    }

    __device__ __forceinline__ ElVisFloat3 MakeFloat3(const float3& f)
	{
		return f;
	}
		
    __device__ __forceinline__ float3 ConvertToFloat3(const ElVisFloat3& f)
	{
		return f;
	}
	
    __device__ __forceinline__ float3 ConvertToFloat3(const ElVisFloat4& f)
	{
		return make_float3(f);
	}
	
	__device__ __forceinline__ ElVisFloat Sqrtf(const ElVisFloat& f)
	{
        #if defined(__CUDACC__)
            return __fsqrt_rn(f);
        #else
            return sqrt(f);
        #endif
	}



#else
	

    __device__ __forceinline__ ElVisFloat3 MakeFloat3(const ElVisFloat4& f)
    {
		ElVisFloat3 result;
		result.x = f.x;
		result.y = f.y;
		result.z = f.z;
        return result;
    }
    
    __device__ __forceinline__ ElVisFloat3 MakeFloat3(const double& x, const double& y, const double& z)
    {
        ElVisFloat3 result;
		result.x = x;
		result.y = y;
		result.z = z;
        return result;
    }
    
    __device__ __forceinline__ ElVisFloat4 MakeFloat4(const double& x, const double& y, const double& z, const double& w)
    {
        ElVisFloat4 result;
		result.x = x;
		result.y = y;
		result.z = z;
		result.w = w;
        return result;
    }
    
    __device__ __forceinline__ ElVisFloat3 MakeFloat3(const float3& f)
	{
		ElVisFloat3 result;
		result.x = static_cast<ElVisFloat>(f.x);
		result.y = static_cast<ElVisFloat>(f.y);
		result.z = static_cast<ElVisFloat>(f.z);
        return result;
	}
	
    __device__ __forceinline__ ElVisFloat dot(const ElVisFloat4& a, const ElVisFloat4& b)
	{
		return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	}

    __device__ __forceinline__ ElVisFloat dot(const ElVisFloat3& a, const ElVisFloat3& b)
	{
		return a.x * b.x + a.y * b.y + a.z * b.z;
	}
	
    __device__ __forceinline__ ElVisFloat3 operator*(const ElVisFloat3& lhs, const ElVisFloat& rhs)
	{
		return MakeFloat3(lhs.x*rhs, lhs.y*rhs, lhs.z*rhs);
	}
	
    __device__ __forceinline__ ElVisFloat3 operator*(const ElVisFloat& lhs, const ElVisFloat3& rhs)
	{
		return rhs*lhs;
	}
	
    __device__ __forceinline__ ElVisFloat3 normalize(const ElVisFloat3& v)
	{
		ElVisFloat invLen = 1.0 / sqrt(dot(v, v));
		return v * invLen;
	}
	
    __device__ __forceinline__ ElVisFloat3 cross(const ElVisFloat3& a, const ElVisFloat3& b)
	{
		return MakeFloat3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
	}

    __device__ __forceinline__ ElVisFloat3 operator+(const ElVisFloat3& lhs, const ElVisFloat3& rhs)
	{
		return MakeFloat3(lhs.x+rhs.x, lhs.y+rhs.y, lhs.z+rhs.z);
	}
	
    __device__ __forceinline__ ElVisFloat3 operator-(const ElVisFloat3& lhs, const ElVisFloat3& rhs)
	{
		return MakeFloat3(lhs.x-rhs.x, lhs.y-rhs.y, lhs.z-rhs.z);
	}

    __device__ __forceinline__ ElVisFloat3 operator+(const ElVisFloat3& lhs, const ElVisFloat& rhs)
    {
        return MakeFloat3(lhs.x+rhs, lhs.y+rhs, lhs.z+rhs);
    }

    __device__ __forceinline__ ElVisFloat3 operator-(const ElVisFloat3& lhs, const ElVisFloat& rhs)
    {
        return MakeFloat3(lhs.x-rhs, lhs.y-rhs, lhs.z-rhs);
    }

    __device__ __forceinline__ ElVisFloat3 fminf(const ElVisFloat3& a, const ElVisFloat3& b)
	{
		return MakeFloat3(fminf(a.x,b.x), fminf(a.y,b.y), fminf(a.z,b.z));
	}
	
	
	
    __device__ __forceinline__ ElVisFloat3 fmaxf(const ElVisFloat3& a, const ElVisFloat3& b)
	{
		return MakeFloat3(fmaxf(a.x,b.x), fmaxf(a.y,b.y), fmaxf(a.z,b.z));
	}
	
    __device__ __forceinline__ float3 ConvertToFloat3(const ElVisFloat3& f)
	{
		return make_float3(f.x, f.y, f.z);
	}
	
    __device__ __forceinline__ float3 ConvertToFloat3(const ElVisFloat4& f)
	{
		return make_float3(f.x, f.y, f.z);
	}
	
    __device__ __forceinline__ ElVisFloat2 operator+(const ElVisFloat2& a, const ElVisFloat2& b)
    {
        return MakeFloat2(a.x + b.x, a.y + b.y);
    }

    __device__ __forceinline__ ElVisFloat2 operator/(const ElVisFloat2& a, const ElVisFloat2& b)
    {
        return MakeFloat2(a.x / b.x, a.y / b.y);
    }

    __device__ __forceinline__ ElVisFloat2 operator/(const ElVisFloat2& a, const ElVisFloat& b)
    {
        return MakeFloat2(a.x / b, a.y / b);
    }

    __device__ __forceinline__ ElVisFloat2 operator/(const ElVisFloat& a, const ElVisFloat2& b)
    {
        return MakeFloat2(a / b.x, a / b.y);
    }

    __device__ __forceinline__ ElVisFloat3 operator*(const ElVisFloat3& a, const ElVisFloat3& b)
	{
		return MakeFloat3(a.x * b.x, a.y * b.y, a.z * b.z);
	}
	
    __device__ __forceinline__ ElVisFloat2 operator*(const ElVisFloat2& lhs, const ElVisFloat& rhs)
    {
        return MakeFloat2(lhs.x*rhs, lhs.y*rhs);
    }

    __device__ __forceinline__ ElVisFloat3& operator*=(ElVisFloat3& lhs, const ElVisFloat& rhs)
    {
        lhs.x *= rhs;
        lhs.y *= rhs;
        lhs.z *= rhs;
        return lhs;
    }

    __device__ __forceinline__ ElVisFloat2 operator*(const ElVisFloat2& lhs, const ElVisFloat2& rhs)
    {
        return MakeFloat2(lhs.x*rhs.x, lhs.y*rhs.y);
    }

    __device__ __forceinline__ ElVisFloat2 operator-(const ElVisFloat2& lhs, const ElVisFloat& rhs)
    {
        return MakeFloat2(lhs.x-rhs, lhs.y-rhs);
    }

    __device__ __forceinline__ void operator+=(ElVisFloat3& lhs, const ElVisFloat3& rhs)
    {
        lhs.x += rhs.x;
        lhs.y += rhs.y;
        lhs.z += rhs.z;
    }

    __device__ __forceinline__ ElVisFloat clamp(const ElVisFloat& f, const ElVisFloat& a, const ElVisFloat& b)
	{
		return fmaxf(a, fminf(f, b));
	}

    __device__ __forceinline__ ElVisFloat3 clamp(const ElVisFloat3& f, const ElVisFloat& a, const ElVisFloat& b)
	{
		return MakeFloat3(clamp(f.x, a, b), clamp(f.y, a, b), clamp(f.z, a, b));
	}
	
	__device__ __forceinline__ ElVisFloat Sqrtf(const ElVisFloat& f)
	{
        #if defined(__CUDACC__)
            return __dsqrt_rn(f);
        #else
            return sqrt(f);
        #endif
	}

	
#endif

__device__ __forceinline__ void operator+=(volatile ElVisFloat3& lhs, const volatile ElVisFloat3& rhs)
{
    lhs.x += rhs.x;
    lhs.y += rhs.y;
    lhs.z += rhs.z;
}

__device__ __forceinline__ float Floor(float f) { return floorf(f); }
__device__ __forceinline__ double Floor(double f) { return floor(f); }


__device__ __forceinline__ bool operator<(const ElVisFloat3& lhs, const ElVisFloat3& rhs)
{
    if( lhs.x < rhs.x ) return true;
    if( lhs.x > rhs.x ) return false;

    if( lhs.y < rhs.y ) return true;
    if( lhs.y > rhs.y ) return false;

    if( lhs.z < rhs.z ) return true;
    return false;
}

template<typename T>
struct DefaultFloat;

template<>
struct DefaultFloat<ElVisFloat>
{
    __device__ __forceinline__ static ElVisFloat GetValue() { return MAKE_FLOAT(0.0); }
};

template<>
struct DefaultFloat<ElVisFloat3>
{
    __device__ __forceinline__ static ElVisFloat3 GetValue() { return MakeFloat3(MAKE_FLOAT(0.0), MAKE_FLOAT(0.0), MAKE_FLOAT(0.0)); }
};


__device__ __forceinline__ ElVisFloat Fabsf(const ElVisFloat& value)
{
    return fabsf(value);
}

__device__ __forceinline__ ElVisFloat3 Fabsf(const ElVisFloat3& value)
{
    return MakeFloat3(fabsf(value.x), fabsf(value.y), fabsf(value.z));
}

__device__ __forceinline__ bool operator==(const ElVisFloat4& lhs, const ElVisFloat4& rhs)
{
    bool result = lhs.x==rhs.x;
    result &= lhs.y == rhs.y;
    result &= lhs.z == rhs.z;
    result &= lhs.w == rhs.w;
    return result;
}

#endif
