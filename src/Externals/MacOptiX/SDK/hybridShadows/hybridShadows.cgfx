
float4x4 pWorldViewProj : WorldViewProj;
float4x4 pWorldViewInv : WorldViewInv;
float4x4 pWorldView : WorldView;

uniform float3 lightPos : LightPos;
uniform float phongExp : PhongExp = 50;
uniform bool isGround : IsGround;
uniform bool doPCF : DoPCF;
uniform float PCFRadius : PCFRadius = 0.007f;
uniform float invSceneScale : InvSceneScale;

sampler2D pWorldPosMap : WorldPosMap;
sampler2D pShadowMap : ShadowMap;
sampler2D pGroundTex : GroundTex;

struct Vertex
{
  float3 position : POSITION;
  float3 normal   : NORMAL;
  float3 texcoord : TEXCOORD;
};

struct Fragment
{
  float4 position   : POSITION;
  float3 normal     : TEXCOORD0;
  float3 worldPos   : TEXCOORD1;
  float4 hPosition  : TEXCOORD2;
  float2 texcoord   : TEXCOORD3;
  float3 eyePos     : TEXCOORD4;
  float3 lightVec   : TEXCOORD5;
  float  upCosTheta : TEXCOORD6;
};

Fragment display_vp( Vertex v )
{
  Fragment f;

  f.position   = mul(pWorldViewProj, float4( v.position, 1 ));
  f.normal     = mul(pWorldViewInv, float4(v.normal,0));
  f.worldPos   = v.position; // * invViewMatrix
  f.hPosition  = f.position;
  f.texcoord   = v.texcoord;
  
  f.eyePos     = mul(pWorldView, float4(v.position, 1));
  f.lightVec   = mul(pWorldView, float4(lightPos - f.worldPos,0));
  f.upCosTheta = clamp(dot(v.normal,float4(0,1,0,0)),0,1);

  return f;
}

float4 worldpos_fp(Fragment f) : COLOR
{
  return float4(f.worldPos,1); 
}

float2 getNormalizedUV(float4 uv_in)
{
  float2 uv_out = (uv_in.xy/uv_in.w)*.5 + .5;

  return uv_out;
}

float3 getColor(float3 p, float2 uv)
{
  float3 color;
  if(isGround) {
    color = tex2D(pGroundTex, float2(uv.x*2.5, uv.y*5));
  } else {
    color = float3(0.462f, 0.725f, 0.0f);
  }
  return color;
}

#define PCF_FILTER_STEP_COUNT 3

float RangeFunction(float3 p0, float3 p1)
{
  const float inv_sigma = 1.f/1e-3f;
  
  float r = length(p0-p1)*invSceneScale;
  return exp( -(r*r)*inv_sigma );
}

float Bilateral_PCF_Filter(float2 uv_center, float2 radius, float3 p0)
{
  float sum = 0;
  float weight = 0;
  float2 stepUV = radius / PCF_FILTER_STEP_COUNT;
  for(float y = -PCF_FILTER_STEP_COUNT; y <= PCF_FILTER_STEP_COUNT; ++y) {
    for(float x = -PCF_FILTER_STEP_COUNT; x <= PCF_FILTER_STEP_COUNT; ++x) {
      float2 offset = float2(x,y)*stepUV;

      float intensity = tex2D(pShadowMap, uv_center+offset).x;
      float3 p = tex2D(pWorldPosMap, uv_center+offset).xyz;
      if(isnan(p.x))
        continue;

      float r = RangeFunction(p0, p);
      sum += r*intensity;
      weight += r;
    }
  }
  return sum / weight;
}

float4 hardshadows_fp(Fragment f) : COLOR
{
  float3 V = normalize(f.eyePos);
  float3 L = normalize(f.lightVec);
  float3 Ka = float3(.1f);
  float3 N = normalize(f.normal);
  float ndl = clamp(dot(N, L),0.f,1.f);

  // check shadow map here
  float intensity;
  float2 uv = getNormalizedUV(f.hPosition);
  if(doPCF) {
    intensity = Bilateral_PCF_Filter(uv, PCFRadius, f.worldPos);
  } else {
    intensity = tex2D(pShadowMap, uv).x;
  }

  // ambient and diffuse
  float3 result = Ka + ndl*intensity;
  result *= getColor(f.worldPos, f.texcoord);

  if(!isGround) {
    // phong specular
    float3 R=reflect(V, N);
    float  spec = pow(clamp(dot(L,R),0.f,1.f), phongExp);
    result += float3(spec)*.5f;
    
    // a little fresnel
    float R0 = .1;
    float cosTheta = abs(dot(V,N));
    float tmp = 1-cosTheta;
    tmp = tmp*tmp;
    tmp = tmp*tmp;
    tmp = tmp*(1-cosTheta);
    float fresnel = R0 + (1-R0)*tmp;
    result += fresnel*float3(.8)*f.upCosTheta;
  }

  return float4(result, 1);
}

technique WorldPos
{
  pass p0
  {
    VertexProgram = compile CG_VERTEX_PROFILE display_vp();
    FragmentProgram = compile CG_FRAGMENT_PROFILE worldpos_fp();
  }
}

technique HardShadows
{
  pass p0
  {
    VertexProgram = compile CG_VERTEX_PROFILE display_vp();
    FragmentProgram = compile CG_FRAGMENT_PROFILE hardshadows_fp();
  }
}
